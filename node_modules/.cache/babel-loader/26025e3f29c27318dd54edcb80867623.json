{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vasilis\\\\Documents\\\\GitHub\\\\dsl\\\\macwordle\\\\src\\\\components\\\\alerts\\\\Alert.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { Fragment, useRef, useEffect } from \"react\"; //import { Fragment } from 'react'\n\nimport { Transition } from '@headlessui/react';\nimport classNames from 'classnames';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction useOutsideAlerter(ref) {\n  _s();\n\n  useEffect(() => {\n    /**\n     * Alert if clicked on outside of element\n     */\n    function handleClickOutside(event) {\n      if (ref.current && !ref.current.contains(event.target)) {\n        alert(\"You clicked outside of me!\");\n      }\n    } // Bind the event listener\n\n\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      // Unbind the event listener on clean up\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, [ref]);\n}\n\n_s(useOutsideAlerter, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\nexport const Alert = _ref => {\n  _s2();\n\n  let {\n    isOpen,\n    message,\n    solutionLink,\n    variant = 'warning'\n  } = _ref;\n  const classes = classNames('fixed top-20 left-1/2 transform -translate-x-1/2 max-w-sm w-full shadow-lg rounded-lg pointer-events-auto ring-1 ring-black ring-opacity-5 overflow-hidden', {\n    'bg-rose-200': variant === 'warning',\n    'bg-green-200 z-20': variant === 'success'\n  });\n  const wrapperRef = useRef(null);\n  useOutsideAlerter(wrapperRef);\n  return /*#__PURE__*/_jsxDEV(Transition, {\n    show: isOpen,\n    as: Fragment,\n    enter: \"ease-out duration-300 transition\",\n    enterFrom: \"opacity-0\",\n    enterTo: \"opacity-100\",\n    leave: \"transition ease-in duration-100\",\n    leaveFrom: \"opacity-100\",\n    leaveTo: \"opacity-0\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes,\n      ref: wrapperRef,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-4\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-sm text-center font-medium text-gray-900\",\n          children: [message, \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n            dangerouslySetInnerHTML: {\n              __html: solutionLink\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 23\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(Alert, \"kF1gJ+9qozGrx9T2BaxcGZVoPDQ=\", false, function () {\n  return [useOutsideAlerter];\n});\n\n_c = Alert;\n\nvar _c;\n\n$RefreshReg$(_c, \"Alert\");","map":{"version":3,"sources":["C:/Users/Vasilis/Documents/GitHub/dsl/macwordle/src/components/alerts/Alert.tsx"],"names":["React","Fragment","useRef","useEffect","Transition","classNames","useOutsideAlerter","ref","handleClickOutside","event","current","contains","target","alert","document","addEventListener","removeEventListener","Alert","isOpen","message","solutionLink","variant","classes","wrapperRef","__html"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,MAAzB,EAAiCC,SAAjC,QAAkD,OAAlD,C,CACA;;AACA,SAASC,UAAT,QAA2B,mBAA3B;AACA,OAAOC,UAAP,MAAuB,YAAvB;;;AASA,SAASC,iBAAT,CAA2BC,GAA3B,EAAgC;AAAA;;AAC5BJ,EAAAA,SAAS,CAAC,MAAM;AACZ;AACR;AACA;AACQ,aAASK,kBAAT,CAA4BC,KAA5B,EAAmC;AAC/B,UAAIF,GAAG,CAACG,OAAJ,IAAe,CAACH,GAAG,CAACG,OAAJ,CAAYC,QAAZ,CAAqBF,KAAK,CAACG,MAA3B,CAApB,EAAwD;AACpDC,QAAAA,KAAK,CAAC,4BAAD,CAAL;AACH;AACJ,KARW,CAUZ;;;AACAC,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,WAA1B,EAAuCP,kBAAvC;AACA,WAAO,MAAM;AACT;AACAM,MAAAA,QAAQ,CAACE,mBAAT,CAA6B,WAA7B,EAA0CR,kBAA1C;AACH,KAHD;AAIH,GAhBQ,EAgBN,CAACD,GAAD,CAhBM,CAAT;AAiBH;;GAlBQD,iB;;AAqBT,OAAO,MAAMW,KAAK,GAAG,QAAmE;AAAA;;AAAA,MAAlE;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,OAAV;AAAmBC,IAAAA,YAAnB;AAAiCC,IAAAA,OAAO,GAAG;AAA3C,GAAkE;AACtF,QAAMC,OAAO,GAAGjB,UAAU,CACxB,4JADwB,EAExB;AACE,mBAAegB,OAAO,KAAK,SAD7B;AAEE,yBAAqBA,OAAO,KAAK;AAFnC,GAFwB,CAA1B;AAQD,QAAME,UAAU,GAAGrB,MAAM,CAAC,IAAD,CAAzB;AACGI,EAAAA,iBAAiB,CAACiB,UAAD,CAAjB;AAEF,sBACE,QAAC,UAAD;AACE,IAAA,IAAI,EAAEL,MADR;AAEE,IAAA,EAAE,EAAEjB,QAFN;AAGE,IAAA,KAAK,EAAC,kCAHR;AAIE,IAAA,SAAS,EAAC,WAJZ;AAKE,IAAA,OAAO,EAAC,aALV;AAME,IAAA,KAAK,EAAC,iCANR;AAOE,IAAA,SAAS,EAAC,aAPZ;AAQE,IAAA,OAAO,EAAC,WARV;AAAA,2BAUE;AAAK,MAAA,SAAS,EAAEqB,OAAhB;AAAyB,MAAA,GAAG,EAAEC,UAA9B;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA,+BACE;AAAG,UAAA,SAAS,EAAC,+CAAb;AAAA,qBACGJ,OADH,oBACY;AAAK,YAAA,uBAAuB,EAAE;AAACK,cAAAA,MAAM,EAAEJ;AAAT;AAA9B;AAAA;AAAA;AAAA;AAAA,kBADZ;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAVF;AAAA;AAAA;AAAA;AAAA,UADF;AAoBD,CAhCM;;IAAMH,K;UAUTX,iB;;;KAVSW,K","sourcesContent":["import React, {Fragment, useRef, useEffect } from \"react\";\n//import { Fragment } from 'react'\nimport { Transition } from '@headlessui/react'\nimport classNames from 'classnames'\n\ntype Props = {\n  isOpen: boolean\n  message: string\n\tsolutionLink: string\n  variant?: 'success' | 'warning'\n}\n\nfunction useOutsideAlerter(ref) {\n    useEffect(() => {\n        /**\n         * Alert if clicked on outside of element\n         */\n        function handleClickOutside(event) {\n            if (ref.current && !ref.current.contains(event.target)) {\n                alert(\"You clicked outside of me!\");\n            }\n        }\n\n        // Bind the event listener\n        document.addEventListener(\"mousedown\", handleClickOutside);\n        return () => {\n            // Unbind the event listener on clean up\n            document.removeEventListener(\"mousedown\", handleClickOutside);\n        };\n    }, [ref]);\n}\n\n\nexport const Alert = ({ isOpen, message, solutionLink, variant = 'warning' }: Props) => {\n  const classes = classNames(\n    'fixed top-20 left-1/2 transform -translate-x-1/2 max-w-sm w-full shadow-lg rounded-lg pointer-events-auto ring-1 ring-black ring-opacity-5 overflow-hidden',\n    {\n      'bg-rose-200': variant === 'warning',\n      'bg-green-200 z-20': variant === 'success',\n    }\n  )\n\t\n\tconst wrapperRef = useRef(null);\n    useOutsideAlerter(wrapperRef);\n\n  return (\n    <Transition\n      show={isOpen}\n      as={Fragment}\n      enter=\"ease-out duration-300 transition\"\n      enterFrom=\"opacity-0\"\n      enterTo=\"opacity-100\"\n      leave=\"transition ease-in duration-100\"\n      leaveFrom=\"opacity-100\"\n      leaveTo=\"opacity-0\"\n    >\n      <div className={classes} ref={wrapperRef}>\n        <div className=\"p-4\">\n          <p className=\"text-sm text-center font-medium text-gray-900\">\n            {message} <div dangerouslySetInnerHTML={{__html: solutionLink}} />\n          </p>\n        </div>\n      </div>\n    </Transition>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}